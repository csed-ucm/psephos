{"openapi":"3.0.2","info":{"title":"Polling App","description":"A REST API to manage users and polls","version":"0.0.5"},"paths":{"/groups/":{"get":{"tags":["Groups"],"summary":"List Groups","description":"## List all groups that the user is a member of.
This endpoint can be used to search for groups by name or by member.
This might be replaces later with a more robust search endpoint combined             with a simple GET endpoint for listing all groups from search.
Returns a list of groups that match the search criteria. If no groups are found, an empty list is returned.

### Parameters
User can pass in a group name and/or a member's information to search for.
If no parameters are passed in, all groups that the user is a member of will be returned.
If user is a superuser, all groups in the database will be returned.

**group_name**: The name of the group to search for.
**member_data**: Either email or User id of the member to search for.","operationId":"list_groups_groups__get","parameters":[{"required":false,"schema":{"title":"Group Name","type":"string"},"name":"group_name","in":"query"},{"required":false,"schema":{"title":"Member Data","anyOf":[{"type":"string","example":"5eb7cf5a86d9755df3a6c593"},{"type":"string","format":"email"}]},"name":"member_data","in":"query"}],"responses":{"200":{"description":"List all groups","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupList"}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]},"post":{"tags":["Groups"],"summary":"Create Group","description":"## Create a new group
This endpoint creates a new group with the user as the owner, admin, and member.
If the group is successfully created, the group's information is returned.

### Parameters
**name**: The name of the group. Must be unique(per user).
**description**: A short description of the group.","operationId":"create_group_groups__post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupCreateIn"}}},"required":true},"responses":{"201":{"description":"Create new group","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupCreateOut"}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/groups/{group_id}":{"get":{"tags":["Groups"],"summary":"Get Group","description":"## Get group by id
This endpoint returns the group's information if the user is a member of the group:            the group's name, description, and owner information.

### Parameters
**group_id**: The id of the group to get.","operationId":"get_group_groups__group_id__get","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"}],"responses":{"200":{"description":"Get group by id","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupReadFull"}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]},"put":{"tags":["Groups"],"summary":"Update Group","description":"## Update a group
Updates a group's information if the user is the owner of the group.

### Parameters
**group_id**: The id of the group to update.","operationId":"update_group_groups__group_id__put","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string"},"name":"group_id","in":"path"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupUpdateIn"}}},"required":true},"responses":{"200":{"description":"Update a group","content":{"application/json":{"schema":{"type":"string"}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["Groups"],"summary":"Delete Group","description":"## Delete a group
Deletes a group if the user is the owner of the group. The group is also removed from the user's groups list.

### Parameters
**group_id**: The id of the group to delete.","operationId":"delete_group_groups__group_id__delete","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"}],"responses":{"200":{"description":"Delete group","content":{"application/json":{"schema":{}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/groups/{group_id}/owner":{"get":{"tags":["Members"],"summary":"Get Group Owner","description":"## Get group owner
Returns the owner of the group if the user is a member of the group or a superuser.

### Parameters
**group_id**: The id of the group to update.","operationId":"get_group_owner_groups__group_id__owner_get","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"}],"responses":{"200":{"description":"Get group owner","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserReadBasicInfo"}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/groups/{group_id}/admins/":{"get":{"tags":["Members"],"summary":"Get Group Admins","description":"## Get list of group admins
Returns the list of group members with admin privilege.
The user must be a member of the group or a superuser.

### Parameters
**group_id**: The id of the group to update.","operationId":"get_group_admins_groups__group_id__admins__get","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"}],"responses":{"200":{"description":"Get list of group administrators","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupReadMembers"}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/groups/{group_id}/users":{"get":{"tags":["Members"],"summary":"Get Group Users","description":"## Get list of group users
Returns the list of group members with user only privilege.
The user must be a member of the group or a superuser to access this endpoint.

### Parameters
**group_id**: The id of the group to update.","operationId":"get_group_users_groups__group_id__users_get","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"}],"responses":{"200":{"description":"Get group members","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupReadMembers"}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/groups/{group_id}/members":{"get":{"tags":["Members"],"summary":"Get Group Members","description":"## Get list of group users
Returns the list of group members with role.
The user must be a member of the group or a superuser to access this endpoint.

### Body
**member**: list of members and their roles. Check the example for more details.","operationId":"get_group_members_groups__group_id__members_get","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"}],"responses":{"200":{"description":"Get group members","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupReadMembers"}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]},"post":{"tags":["Members"],"summary":"Add User To Group","description":"## Add member(s) to a group.
This route adds a user or multiple users to a group with a specified role.
The front-end application must do validation to ensure that the user exists in the database        and is not already a member of the group.
This function also does the same validation checks; However, no users will be added
if any error occurs.

### Parameters
**group_id**: The id of the group to update.

### Body
The function takes a list of JSON objects(Models) with email of the new user and the
role(privilege level) in the group. Check the example for more details.

Possible outcomes:
 - The function will return a list of emails of users that were not found in the database.
 - The function will return an error if a user is already a member of the group
 - The function will successfully add the users to the group","operationId":"add_user_to_group_groups__group_id__members_post","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupAddMembers"}}},"required":true},"responses":{"200":{"description":"Add user(s) to a group","content":{"application/json":{"schema":{}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/groups/{group_id}/member/{user_id}":{"get":{"tags":["Members"],"summary":"Get Member Details","description":"## Get member details
Returns the details of a member of a group.
The user must be a member of the group or a superuser to access this endpoint.","operationId":"get_member_details_groups__group_id__member__user_id__get","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"},{"required":true,"schema":{"title":"User Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"user_id","in":"path"}],"responses":{"200":{"description":"Get member details","content":{"application/json":{"schema":{}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]},"delete":{"tags":["Members"],"summary":"Remove Member","description":"## Remove a member from a group
This route removes a member from a group. The user must be an admin of the group to remove a member.
The owner of the group cannot be removed.
The user cannot remove themselves from the group. (subject to change in the future)","operationId":"remove_member_groups__group_id__member__user_id__delete","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"},{"required":true,"schema":{"title":"User Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"user_id","in":"path"}],"responses":{"200":{"description":"Remove a member from a group","content":{"application/json":{"schema":{}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]},"patch":{"tags":["Members"],"summary":"Promote User","description":"## Promote or demote a group member
This route promotes a member with a user privilege to an admin or demotes an admin to a regular user.
The owner of the group cannot be demoted. The user must be an admin of the group to promote or demote a member.
If the user new role, specified in the body, is the same as the current role,         the function will return success but will not change the role.","operationId":"promote_user_groups__group_id__member__user_id__patch","parameters":[{"required":true,"schema":{"title":"Group Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"group_id","in":"path"},{"required":true,"schema":{"title":"User Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"user_id","in":"path"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupMemberUpdateRole"}}},"required":true},"responses":{"200":{"description":"Promote a member to admin","content":{"application/json":{"schema":{}}}},"404":{"description":"Not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/users/groups":{"get":{"tags":["Users"],"summary":"List My Groups","description":"## Get current user groups

This route returns all groups that currently logged in user is a member of,         with the user's role in that group.","operationId":"list_my_groups_users_groups_get","responses":{"200":{"description":"List of groups.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupList"}}}},"404":{"description":"User not found"}},"security":[{"OAuth2PasswordBearer":[]}]}},"/users/{user_id}/groups":{"get":{"tags":["Users"],"summary":"List User Groups","description":"## Delete current user account

This route, finds user by provided id, or raises a HTTP exception (User not found).
If user is found, lists all groups that a user is a member of, with the user's role in that group.

### Request Query Parameters

**user_id**: id of the user whose groups are to be listed","operationId":"list_user_groups_users__user_id__groups_get","parameters":[{"required":true,"schema":{"title":"User Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":"user_id","in":"path"}],"responses":{"200":{"description":"List of groups.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupList"}}}},"404":{"description":"User not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/users/me":{"get":{"tags":["Users"],"summary":"Users:Current User","operationId":"users_current_user_users_me_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"401":{"description":"Missing token or inactive user."}},"security":[{"OAuth2PasswordBearer":[]}]},"delete":{"tags":["Users"],"summary":"Delete User","description":"## Delete current user account

This route deletes the account of the currently logged in user.

### Request body

- **user** - User object

### Expected Response

**204** - *The account has been deleted*","operationId":"delete_user_users_me_delete","responses":{"204":{"description":"The account has been deleted"},"404":{"description":"User not found"},"500":{"description":"User was not deleted"}},"security":[{"OAuth2PasswordBearer":[]}]},"patch":{"tags":["Users"],"summary":"Users:Patch Current User","operationId":"users_patch_current_user_users_me_patch","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserUpdate"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"401":{"description":"Missing token or inactive user."},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"UPDATE_USER_EMAIL_ALREADY_EXISTS":{"summary":"A user with this email already exists.","value":{"detail":"UPDATE_USER_EMAIL_ALREADY_EXISTS"}},"UPDATE_USER_INVALID_PASSWORD":{"summary":"Password validation failed.","value":{"detail":{"code":"UPDATE_USER_INVALID_PASSWORD","reason":"Password should beat least 3 characters"}}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/auth/jwt/login":{"post":{"tags":["Auth"],"summary":"Auth:Jwt.Login","operationId":"auth_jwt_login_auth_jwt_login_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_auth_jwt_login_auth_jwt_login_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BearerResponse"},"example":{"access_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI","token_type":"bearer"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"LOGIN_BAD_CREDENTIALS":{"summary":"Bad credentials or the user is inactive.","value":{"detail":"LOGIN_BAD_CREDENTIALS"}},"LOGIN_USER_NOT_VERIFIED":{"summary":"The user is not verified.","value":{"detail":"LOGIN_USER_NOT_VERIFIED"}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/jwt/logout":{"post":{"tags":["Auth"],"summary":"Auth:Jwt.Logout","operationId":"auth_jwt_logout_auth_jwt_logout_post","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"401":{"description":"Missing token or inactive user."}},"security":[{"OAuth2PasswordBearer":[]}]}},"/auth/register":{"post":{"tags":["Auth"],"summary":"Register:Register","operationId":"register_register_auth_register_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"REGISTER_USER_ALREADY_EXISTS":{"summary":"A user with this email already exists.","value":{"detail":"REGISTER_USER_ALREADY_EXISTS"}},"REGISTER_INVALID_PASSWORD":{"summary":"Password validation failed.","value":{"detail":{"code":"REGISTER_INVALID_PASSWORD","reason":"Password should beat least 3 characters"}}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/forgot-password":{"post":{"tags":["Auth"],"summary":"Reset:Forgot Password","operationId":"reset_forgot_password_auth_forgot_password_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Body_reset_forgot_password_auth_forgot_password_post"}}},"required":true},"responses":{"202":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/reset-password":{"post":{"tags":["Auth"],"summary":"Reset:Reset Password","operationId":"reset_reset_password_auth_reset_password_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Body_reset_reset_password_auth_reset_password_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"RESET_PASSWORD_BAD_TOKEN":{"summary":"Bad or expired token.","value":{"detail":"RESET_PASSWORD_BAD_TOKEN"}},"RESET_PASSWORD_INVALID_PASSWORD":{"summary":"Password validation failed.","value":{"detail":{"code":"RESET_PASSWORD_INVALID_PASSWORD","reason":"Password should be at least 3 characters"}}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/request-verify-token":{"post":{"tags":["Auth"],"summary":"Verify:Request-Token","operationId":"verify_request_token_auth_request_verify_token_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Body_verify_request_token_auth_request_verify_token_post"}}},"required":true},"responses":{"202":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/verify":{"post":{"tags":["Auth"],"summary":"Verify:Verify","operationId":"verify_verify_auth_verify_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Body_verify_verify_auth_verify_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"VERIFY_USER_BAD_TOKEN":{"summary":"Bad token, not existing user ornot the e-mail currently set for the user.","value":{"detail":"VERIFY_USER_BAD_TOKEN"}},"VERIFY_USER_ALREADY_VERIFIED":{"summary":"The user is already verified.","value":{"detail":"VERIFY_USER_ALREADY_VERIFIED"}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/users/{id}":{"get":{"tags":["Users"],"summary":"Users:User","operationId":"users_user_users__id__get","parameters":[{"required":true,"schema":{"title":"Id"},"name":"id","in":"path"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"401":{"description":"Missing token or inactive user."},"403":{"description":"Not a superuser."},"404":{"description":"The user does not exist."},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]},"delete":{"tags":["Users"],"summary":"Users:Delete User","operationId":"users_delete_user_users__id__delete","parameters":[{"required":true,"schema":{"title":"Id"},"name":"id","in":"path"}],"responses":{"204":{"description":"Successful Response"},"401":{"description":"Missing token or inactive user."},"403":{"description":"Not a superuser."},"404":{"description":"The user does not exist."},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]},"patch":{"tags":["Users"],"summary":"Users:Patch User","operationId":"users_patch_user_users__id__patch","parameters":[{"required":true,"schema":{"title":"Id"},"name":"id","in":"path"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserUpdate"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"401":{"description":"Missing token or inactive user."},"403":{"description":"Not a superuser."},"404":{"description":"The user does not exist."},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"UPDATE_USER_EMAIL_ALREADY_EXISTS":{"summary":"A user with this email already exists.","value":{"detail":"UPDATE_USER_EMAIL_ALREADY_EXISTS"}},"UPDATE_USER_INVALID_PASSWORD":{"summary":"Password validation failed.","value":{"detail":{"code":"UPDATE_USER_INVALID_PASSWORD","reason":"Password should beat least 3 characters"}}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}}},"components":{"schemas":{"BearerResponse":{"title":"BearerResponse","required":["access_token","token_type"],"type":"object","properties":{"access_token":{"title":"Access Token","type":"string"},"token_type":{"title":"Token Type","type":"string"}}},"Body_auth_jwt_login_auth_jwt_login_post":{"title":"Body_auth_jwt_login_auth_jwt_login_post","required":["username","password"],"type":"object","properties":{"grant_type":{"title":"Grant Type","pattern":"password","type":"string"},"username":{"title":"Username","type":"string"},"password":{"title":"Password","type":"string"},"scope":{"title":"Scope","type":"string","default":""},"client_id":{"title":"Client Id","type":"string"},"client_secret":{"title":"Client Secret","type":"string"}}},"Body_reset_forgot_password_auth_forgot_password_post":{"title":"Body_reset_forgot_password_auth_forgot_password_post","required":["email"],"type":"object","properties":{"email":{"title":"Email","type":"string","format":"email"}}},"Body_reset_reset_password_auth_reset_password_post":{"title":"Body_reset_reset_password_auth_reset_password_post","required":["token","password"],"type":"object","properties":{"token":{"title":"Token","type":"string"},"password":{"title":"Password","type":"string"}}},"Body_verify_request_token_auth_request_verify_token_post":{"title":"Body_verify_request_token_auth_request_verify_token_post","required":["email"],"type":"object","properties":{"email":{"title":"Email","type":"string","format":"email"}}},"Body_verify_verify_auth_verify_post":{"title":"Body_verify_verify_auth_verify_post","required":["token"],"type":"object","properties":{"token":{"title":"Token","type":"string"}}},"ErrorModel":{"title":"ErrorModel","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","anyOf":[{"type":"string"},{"type":"object","additionalProperties":{"type":"string"}}]}}},"GroupAddMembers":{"title":"GroupAddMembers","required":["members"],"type":"object","properties":{"members":{"title":"Members","type":"array","items":{"$ref":"#/components/schemas/UserAddToGroup"}}},"example":{"members":[{"email":"user1@example.com","role":"admin"},{"email":"user2@example.com","role":"user"}]}},"GroupCreateIn":{"title":"GroupCreateIn","type":"object","properties":{"name":{"title":"Name","maxLength":50,"minLength":3,"pattern":"^[A-Z][A-Za-z]{2,}([ ]([0-9]+|[A-Z][A-Za-z]*))*$","type":"string","default":""},"description":{"title":"Description","maxLength":300,"type":"string","default":""}},"example":{"name":"Group 01","description":"My first Group"}},"GroupCreateOut":{"title":"GroupCreateOut","required":["id","name"],"type":"object","properties":{"message":{"title":"Message","type":"string","default":"Group created successfully"},"id":{"title":"Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"name":{"title":"Name","type":"string"}}},"GroupList":{"title":"GroupList","required":["groups"],"type":"object","properties":{"groups":{"title":"Groups","type":"array","items":{"$ref":"#/components/schemas/GroupReadSimple"}}},"example":{"groups":[{"name":"Group 01","role":"user"},{"name":"Group 02","role":"user"},{"name":"Group 03","role":"admin"}]}},"GroupMember":{"title":"GroupMember","required":["email","first_name","last_name"],"type":"object","properties":{"email":{"title":"Email","type":"string","format":"email"},"first_name":{"title":"First Name","type":"string"},"last_name":{"title":"Last Name","type":"string"},"role":{"title":"Role","type":"string","default":"user"}},"example":{"email":"user@example.com","first_name":"John","last_name":"Doe","role":"user"}},"GroupMemberUpdateRole":{"title":"GroupMemberUpdateRole","required":["role"],"type":"object","properties":{"role":{"title":"Role","type":"string","example":"admin"}}},"GroupReadFull":{"title":"GroupReadFull","required":["name","description","owner_name","owner_email"],"type":"object","properties":{"name":{"title":"Name","type":"string","example":"Group 01"},"description":{"title":"Description","type":"string"},"owner_name":{"title":"Owner Name","type":"string"},"owner_email":{"title":"Owner Email","type":"string","format":"email"}},"example":{"name":"Example Group","description":"This is an example group","owner_name":"John Doe","owner_email":"jdoe@example.com"}},"GroupReadMembers":{"title":"GroupReadMembers","required":["members"],"type":"object","properties":{"members":{"title":"Members","type":"array","items":{"$ref":"#/components/schemas/GroupMember"}}},"example":{"members":[{"email":"jdoe@example.com","first_name":"John","last_name":"Doe","role":"admin"},{"email":"jsmith@example.com","first_name":"Jack","last_name":"Smith","role":"user"}]}},"GroupReadSimple":{"title":"GroupReadSimple","required":["name","role"],"type":"object","properties":{"name":{"title":"Name","type":"string"},"role":{"title":"Role","type":"string"}},"example":{"name":"Group 01","role":"user"}},"GroupUpdateIn":{"title":"GroupUpdateIn","type":"object","properties":{"name":{"title":"Name","maxLength":50,"minLength":3,"pattern":"^[A-Z][A-Za-z]{2,}([ ]([0-9]+|[A-Z][A-Za-z]*))*$","type":"string","default":""},"description":{"title":"Description","maxLength":300,"type":"string","default":""}}},"HTTPValidationError":{"title":"HTTPValidationError","type":"object","properties":{"detail":{"title":"Detail","type":"array","items":{"$ref":"#/components/schemas/ValidationError"}}}},"UserAddToGroup":{"title":"UserAddToGroup","required":["email"],"type":"object","properties":{"id":{"title":"Id"},"email":{"title":"Email","type":"string","format":"email"},"is_active":{"title":"Is Active","type":"boolean","default":true},"is_superuser":{"title":"Is Superuser","type":"boolean","default":false},"is_verified":{"title":"Is Verified","type":"boolean","default":false},"role":{"title":"Role","maxLength":5,"minLength":4,"pattern":"^(user|admin)$","type":"string","description":"Role of the user in the group","default":"user"}},"description":"Base User model.","example":{"email":"email@example.com","role":"admin"}},"UserCreate":{"title":"UserCreate","required":["email","password"],"type":"object","properties":{"email":{"title":"Email","type":"string","format":"email"},"password":{"title":"Password","type":"string"},"is_active":{"title":"Is Active","type":"boolean","default":true},"is_superuser":{"title":"Is Superuser","type":"boolean","default":false},"is_verified":{"title":"Is Verified","type":"boolean","default":false},"first_name":{"title":"First Name","maxLength":20,"minLength":2,"pattern":"^[A-Z][a-z]*$","type":"string"},"last_name":{"title":"Last Name","maxLength":20,"minLength":2,"pattern":"^[A-Z][a-z]*$","type":"string"}},"example":{"email":"user@example.com","password":"pass1234","first_name":"John","last_name":"Smith"}},"UserRead":{"title":"UserRead","required":["id","email","first_name","last_name"],"type":"object","properties":{"id":{"title":"Id","type":"string","example":"5eb7cf5a86d9755df3a6c593"},"email":{"title":"Email","type":"string","format":"email"},"is_active":{"title":"Is Active","type":"boolean","default":true},"is_superuser":{"title":"Is Superuser","type":"boolean","default":false},"is_verified":{"title":"Is Verified","type":"boolean","default":false},"first_name":{"title":"First Name","type":"string"},"last_name":{"title":"Last Name","type":"string"}},"description":"Base User model."},"UserReadBasicInfo":{"title":"UserReadBasicInfo","required":["email","first_name","last_name"],"type":"object","properties":{"email":{"title":"Email","type":"string","format":"email"},"first_name":{"title":"First Name","type":"string"},"last_name":{"title":"Last Name","type":"string"}}},"UserUpdate":{"title":"UserUpdate","type":"object","properties":{"password":{"title":"Password","type":"string"},"email":{"title":"Email","type":"string","format":"email"},"is_active":{"title":"Is Active","type":"boolean"},"is_superuser":{"title":"Is Superuser","type":"boolean"},"is_verified":{"title":"Is Verified","type":"boolean"}}},"ValidationError":{"title":"ValidationError","required":["loc","msg","type"],"type":"object","properties":{"loc":{"title":"Location","type":"array","items":{"anyOf":[{"type":"string"},{"type":"integer"}]}},"msg":{"title":"Message","type":"string"},"type":{"title":"Error Type","type":"string"}}}},"securitySchemes":{"OAuth2PasswordBearer":{"type":"oauth2","flows":{"password":{"scopes":{},"tokenUrl":"auth/jwt/login"}}}}}}